{
  "name": "recipes",
  "version": "1.0.0",
  "description": "Recipes, simplified",
  "main": "src/index.js",
  "repository": "git@github.com:scan/recipes.git",
  "author": "Tom Streller <tom@streller.me>",
  "license": "AGPL-3.0",
  "private": true,
  "scripts": {
    "lint": "eslint -c ./.eslintrc.json --ext .ts --ext .tsx ./src ./pages",
    "test": "jest --passWithNoTests",
    "build": "webpack",
    "dev": "webpack serve --progress"
  },
  "dependencies": {
    "@emotion/react": "^11.0.0",
    "@emotion/styled": "^11.0.0",
    "@material-ui/core": "^5.0.0-alpha.34",
    "@material-ui/icons": "^5.0.0-alpha.34",
    "classnames": "^2.2.6",
    "core-js": "^3.10.0",
    "date-fns": "^2.19.0",
    "jsdom": ">= 11.12.0",
    "react": "^17.0.2",
    "react-cookie": "^4.0.3",
    "react-dom": "^17.0.2",
    "react-hook-form": "^7.4.2",
    "universal-cookie": "^4.0.4",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@testing-library/dom": "^7.30.3",
    "@testing-library/jest-dom": "^5.11.10",
    "@testing-library/react": "^11.2.6",
    "@testing-library/user-event": "^13.1.1",
    "@types/classnames": "^2.2.11",
    "@types/jest": "^26.0.22",
    "@types/node": "^15.6.0",
    "@types/react": "^17.0.3",
    "@types/react-dom": "^17.0.3",
    "@types/uuid": "^8.3.0",
    "@typescript-eslint/eslint-plugin": "^4.20.0",
    "@typescript-eslint/parser": "^4.20.0",
    "eslint": "^7.23.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-prettier": "^3.3.1",
    "eslint-plugin-react": "^7.23.0",
    "eslint-plugin-react-hooks": "^4.2.0",
    "html-webpack-plugin": "^5.3.1",
    "jest": "^26.6.3",
    "prettier": "^2.2.1",
    "ts-jest": "^26.5.4",
    "ts-loader": "^9.2.2",
    "typescript": "^4.2.3",
    "webpack": "^5.37.1",
    "webpack-cli": "^4.7.0",
    "webpack-dev-server": "^3.11.2"
  },
  "jest": {
    "collectCoverage": false,
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/vendor/**"
    ],
    "roots": [
      "src",
      "pages"
    ],
    "moduleDirectories": [
      "node_modules",
      "src"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ],
    "transform": {
      "\\.(ts|tsx)$": "ts-jest"
    },
    "setupFilesAfterEnv": [
      "<rootDir>/jest.setup.ts"
    ],
    "moduleNameMapper": {
      "^~/(.*)$": "<rootDir>/src/$1"
    },
    "globals": {
      "ts-jest": {
        "tsconfig": {
          "jsx": "react-jsx"
        }
      }
    }
  },
  "eslint": {
    "root": true,
    "env": {
      "browser": true,
      "node": true
    },
    "extends": [
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended",
      "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "project": "tsconfig.json",
      "sourceType": "module",
      "createDefaultProgram": true
    },
    "plugins": [
      "@typescript-eslint",
      "prettier"
    ],
    "settings": {
      "react": {
        "version": "detect"
      }
    },
    "rules": {
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": [
        "error",
        {
          "default": "array"
        }
      ],
      "@typescript-eslint/ban-types": [
        "error",
        {
          "types": {
            "Object": {
              "message": "Avoid using the `Object` type. Did you mean `object`?"
            },
            "Function": {
              "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
            },
            "Boolean": {
              "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
            },
            "Number": {
              "message": "Avoid using the `Number` type. Did you mean `number`?"
            },
            "String": {
              "message": "Avoid using the `String` type. Did you mean `string`?"
            },
            "Symbol": {
              "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
            }
          }
        }
      ],
      "@typescript-eslint/consistent-type-assertions": "error",
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "variable",
          "types": [
            "function"
          ],
          "format": [
            "camelCase",
            "PascalCase"
          ]
        }
      ],
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-empty-interface": "error",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-parameter-properties": "off",
      "@typescript-eslint/no-inferrable-types": "off",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/no-var-requires": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/quotes": [
        "error",
        "single"
      ],
      "@typescript-eslint/triple-slash-reference": [
        "error",
        {
          "path": "always",
          "types": "prefer-import",
          "lib": "always"
        }
      ],
      "@typescript-eslint/unified-signatures": "error",
      "complexity": "off",
      "constructor-super": "error",
      "eqeqeq": [
        "error",
        "smart"
      ],
      "guard-for-in": "error",
      "id-blacklist": [
        "error",
        "any",
        "Number",
        "number",
        "String",
        "string",
        "Boolean",
        "boolean",
        "Undefined",
        "undefined"
      ],
      "id-match": "error",
      "max-classes-per-file": [
        "error",
        1
      ],
      "max-len": [
        "error",
        {
          "ignorePattern": "\\s+className=|^import|\\s+d=",
          "code": 120
        }
      ],
      "new-parens": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-cond-assign": "error",
      "no-console": "error",
      "no-debugger": "error",
      "no-empty": "error",
      "no-eval": "error",
      "no-fallthrough": "off",
      "no-invalid-this": "off",
      "no-new-wrappers": "error",
      "no-shadow": [
        "error",
        {
          "hoist": "all"
        }
      ],
      "no-throw-literal": "error",
      "no-trailing-spaces": "error",
      "no-undef-init": "error",
      "no-underscore-dangle": "error",
      "no-unsafe-finally": "error",
      "no-unused-labels": "error",
      "no-var": "error",
      "object-shorthand": "error",
      "one-var": [
        "error",
        "never"
      ],
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "radix": "error",
      "react/prop-types": "off",
      "react/jsx-boolean-value": [
        "error",
        "never"
      ],
      "react/jsx-curly-spacing": [
        "error",
        "never",
        {
          "allowMultiline": true
        }
      ],
      "react/jsx-key": "error",
      "react/jsx-no-bind": "off",
      "react/jsx-uses-react": "off",
      "react/react-in-jsx-scope": "off",
      "spaced-comment": [
        "error",
        "always",
        {
          "markers": [
            "/"
          ]
        }
      ],
      "use-isnan": "error",
      "valid-typeof": "off"
    }
  },
  "prettier": {
    "trailingComma": "all",
    "tabWidth": 2,
    "semi": true,
    "singleQuote": true,
    "jsxSingleQuote": true,
    "bracketSpacing": true,
    "arrowParens": "always",
    "jsxBracketSameLine": false
  }
}
